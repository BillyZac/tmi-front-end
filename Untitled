//the following modifies the dendrogram using functions declared at the bottom
function update(source) {

  //compute the new tree layout
  var nodes = tree.nodes(root),
      links = tree.links(nodes);

  //normalize fixed-depth for each node, magically!
  nodes.forEach(function(d) { d.y = d.depth * 50; });

  //update the nodes  ...
  var node = svg.selectAll("g.node")
      .data(nodes, function (d) {return d.id || (d.id = ++i); });

  //enter any new node at the parent's previous position.
  var nodeEnter = node.enter().append("g")
      .attr("class", "node")
      //.attr("transform", function(d) { return "rotate(" + (d.x - 90) + ")translate(" + d.y + ")"; })
      .on("click", click)
      .on("mouseover", showTooltip)
      .on('mouseout', hideTooltip)

  //adding circles to nodes
  nodeEnter.append("circle")
      .attr("r", dendrogramService.config.node.initialSize)
      .style("fill", function(d) { return d._children ? "orange" : "#fff"; });

  //adding text and setting attributes
  nodeEnter.append("text")
      .attr("x", 10 )
      .attr("dy", ".35em")
      .attr("text-anchor", "start")
      .attr("transform", function(d) { return d.x < 180 ? "translate(-2)" : "rotate(360)translate(2)"; })
      // .attr("transform", function(d) { return d.x < 180 ? "translate(0)" : "rotate(180)translate(-" + (d.name.length * 8.5)  + ")"; })
      .text(function(d) { return d.name; })
      // .style('opacity', dendrogramService.config.text.initialOpacity)
      .style("fill-opacity", 1e-6)
      .attr('class', 'node-name')

  // Transition nodes to their new position.
  var nodeUpdate = node.transition()
      .duration(duration)
      .attr("transform", function(d) { return "rotate(" + (d.x - 90) + ")translate(" + d.y + ")"; })

  //setting node styling to differentiate between nodes that have more information contained within it them
  nodeUpdate.select("circle")
      .attr("r", dendrogramService.config.node.initialSize)
      .style("fill", function(d) { return d._children ? "orange" : "white"; })

  //fixed text positioning so text on both sides of dendrogram appears correctly
  nodeUpdate.select("text")
      .style("fill-opacity", 1)
      .attr("text-anchor", function(d) {
        if (d.x > 180) {
          return "end"
        }
      })
      .attr("transform", function(d) {
        if (d.x < 180) {
          var transformText = "translate(0)"
          return transformText
        } else {
          var transformText = "rotate(180)translate(-20)";
          return transformText
        }
      });

  // Trying to make appropriate transforms, not perfect
  var nodeExit = node.exit().transition()
      .duration(duration)
      //.attr("transform", function(d) { return "diagonal(" + source.y + "," + source.x + ")"; })
      .remove();

  nodeExit.select("circle")
      .attr("r", dendrogramService.config.node.initialSize);

  nodeExit.select("text")
      .style("fill-opacity", 1e-6);

  // Update the links between nodesâ€¦
  var link = svg.selectAll("path.link")
      .data(links, function(d) { return d.target.id; });

  // Enter any new links at the parent's previous position.
  link.enter().insert("path", "g")
      .attr("class", "link")
      .attr("d", function(d) {
        var o = {x: source.x0, y: source.y0};
        return diagonal({source: o, target: o});
      });

  // Transition links to their new position.
  link.transition()
      .duration(duration)
      .attr("d", diagonal);

  // Transition exiting nodes to the parent's new position.
  link.exit().transition()
      .duration(duration)
      .attr("d", function(d) {
        var o = {x: source.x, y: source.y};
        return diagonal({source: o, target: o});
      })
      .remove();

  // Stash the old positions for transitions.
  nodes.forEach(function(d) {
    d.x0 = d.x;
    d.y0 = d.y;
    });
}
